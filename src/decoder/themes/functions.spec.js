import fs from 'fs';
import {
  createThemeOptionsFile,
  createScript,
  createFileFromCData,
  createPreviewImage,
} from './functions';

jest.mock('fs');

describe('Theme Decodes correctly', () => {
  afterEach(() => {
    jest.restoreAllMocks();
  });

  test('Writes theme options as json to a file', () => {
    const sampleAttributes = {
      name: 'Social',
      version: '11.1.0.9731',
      description: "'Social' Blog Theme",
    };
    const sampleTheme = {
      attr: sampleAttributes,
    };

    const sampleDir = '/aXgkD';
    fs.mkdirSync(sampleDir);

    createThemeOptionsFile(sampleTheme, sampleDir);

    const mockFile = [sampleDir, '/theme_options.json'].join('');
    const theme = fs.readFileSync(mockFile, 'UTF8');
    const themeObject = JSON.parse(theme);
    expect(themeObject).toEqual(sampleAttributes);
  });

  test('Writes a script to a file with the correct extension', () => {
    const sampleName = 'headScript';

    const sampleScript = `$context_v2_themeHeader.RenderStylesheetFiles()
  $context_v2_themeHeader.RenderJavascriptFiles()`;

    const sampleScriptObject = {
      attr: { language: 'Velocity' },
      __cdata: sampleScript,
    };

    const sampleParentObject = {
      [sampleName]: sampleScriptObject,
    };

    const sampleDir = '/aXgkDd';
    fs.mkdirSync(sampleDir);
    const scriptsDir = [sampleDir, '/scripts'].join('');
    fs.mkdirSync(scriptsDir);

    createScript(sampleName, sampleParentObject, sampleDir);

    const mockFile = [sampleDir, '/scripts/', sampleName, '.vm'].join('');
    const scriptObject = fs.readFileSync(mockFile, 'UTF8');
    expect(scriptObject).toEqual(sampleScript);
  });

  test('Writes cdata of object to file', () => {
    const sampleName = 'sample.php';
    const cdata = "<?php echo('some random php code'); ?>";
    const sampleData = {
      __cdata: cdata,
    };
    const sampleDir = '/';
    createFileFromCData(sampleName, sampleData, sampleDir);

    const createdFile = fs.readFileSync('/sample.php', 'UTF8');
    expect(createdFile).toEqual(cdata);

    const emptyData = createFileFromCData(sampleName, undefined, sampleDir);
    expect(emptyData).toEqual(undefined);
  });

  test('Writes encoded preview image to file', () => {
    const encodedImage = '';
    const object = {
      attr: {
        name: 'sample.png',
      },
      __cdata: encodedImage,
    };
    const sampleDir = '/';

    createPreviewImage(object, sampleDir);

    const createdImage = fs.readFileSync('/sample.png');
    const encodedCreatedImage = createdImage.toString('base64');
    expect(encodedCreatedImage).toEqual(encodedImage);

    const emptyData = createPreviewImage(undefined, sampleDir);
    expect(emptyData).toEqual(undefined);
  });
});
